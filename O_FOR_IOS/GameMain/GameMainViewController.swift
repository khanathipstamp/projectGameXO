//
//  GameMainViewController.swift
//  O_FOR_IOS
//
//  Created khanathip rachprachon on 19/3/2564 BE.
//  Copyright © 2564 BE ___ORGANIZATIONNAME___. All rights reserved.
//
//  Template generated by Juanpe Catalán @JuanpeCMiOS
//

import UIKit

class GameMainViewController: UIViewController, GameMainViewProtocol {

	var presenter: GameMainPresenterProtocol?

    @IBOutlet var viewMap: UIView!
    @IBOutlet weak var sement: UISegmentedControl!
    @IBOutlet weak var scrollLabel: UILabel!
    
    var buttonView = UIButton()
    var countSegment:Int = 3
    var tagcheck:Int = 0
    var counter:Int = 0
    var checkwinX:Int = 0
    var checkwinO:Int = 0
    var arrayX = Array(repeating: Array(repeating: 0, count: 10), count: 10)
    var arrayO = Array(repeating: Array(repeating: 0, count: 10), count: 10)
    var arrayScroll = [String]()
    
    func drawMap(){
        
        for i in 0...countSegment-1 {
            let numX = Int((view.frame.size.width)/CGFloat(countSegment))
            for j in 0...countSegment-1{
                tagcheck += 1
                if i == j{
                    buttonView = UIButton(frame: CGRect(x: numX*i, y: numX*j, width: numX-1, height: numX-1))
                    buttonView.backgroundColor = UIColor.init(cgColor: #colorLiteral(red: 0.8039215803, green: 0.8039215803, blue: 0.8039215803, alpha: 1))
                    buttonView.addTarget(self, action: #selector(buttonAction), for: .touchUpInside)
                    buttonView.tag = tagcheck
                    viewMap.addSubview(buttonView)
                }
                if i < j {
                    buttonView = UIButton(frame: CGRect(x: numX*i, y: numX*j, width: numX-1, height: numX-1))
                    buttonView.backgroundColor = UIColor.init(cgColor: #colorLiteral(red: 0.8039215803, green: 0.8039215803, blue: 0.8039215803, alpha: 1))
                    buttonView.addTarget(self, action: #selector(buttonAction), for: .touchUpInside)
                    buttonView.tag = tagcheck
                    viewMap.addSubview(buttonView)
                }
                if i > j {
                    buttonView = UIButton(frame: CGRect(x: numX*i, y: numX*j, width: numX-1, height: numX-1))
                    buttonView.backgroundColor = UIColor.init(cgColor: #colorLiteral(red: 0.8039215803, green: 0.8039215803, blue: 0.8039215803, alpha: 1))
                    buttonView.addTarget(self, action: #selector(buttonAction), for: .touchUpInside)
                    buttonView.tag = tagcheck
                    viewMap.addSubview(buttonView)
                }
            }
        }
    }
    func removeMapOld(){
        for locView in self.viewMap.subviews {
            locView.removeFromSuperview()
        }
        for i in 0...countSegment-1 {
            for j in 0...countSegment-1{
                arrayX[i][j] = 0
                arrayO[i][j] = 0
            }
        }
    }
    @IBAction func sement(_ sender: UISegmentedControl) {
        countSegment = 0
        checkwinX = 0
        checkwinO = 0
        if sender.selectedSegmentIndex == 0 {
            countSegment = 3
            removeMapOld()
        }
        if sender.selectedSegmentIndex == 1{
            countSegment = 4
            removeMapOld()
        }
        if sender.selectedSegmentIndex == 2{
            countSegment = 5
            removeMapOld()
        }
        if sender.selectedSegmentIndex == 3{
            countSegment = 6
            removeMapOld()
        }
        if sender.selectedSegmentIndex == 4{
            countSegment = 7
            removeMapOld()
        }
        if sender.selectedSegmentIndex == 5{
            countSegment = 8
            removeMapOld()
        }
        drawMap()
    }
    @IBAction func resetMap(_ sender: Any) {
        removeMapOld()
        drawMap()
    }
    func checkWinX(x:Double,y:Double){
        let numX = Int((view.frame.size.width)/CGFloat(countSegment))
        for i in 0...countSegment-1 {
            for j in 0...countSegment-1{
                let numI = numX*i
                let numJ = numX*j
                if numI == Int(x) && numJ == Int(y){
                    arrayX[i][j] = 1

                    if arrayX[0][countSegment-1] == 1 && arrayX[i][j] == 1 && arrayX[countSegment-1][0] == 1 {
                        alertWin(player: "Player X")
                    }
                    if arrayX[0][0] == 1 && arrayX[i][j] == 1 && arrayX[countSegment-1][countSegment-1] == 1 {
                        alertWin(player: "Player X")
                    }
                    if arrayX[0][j] == 1 && arrayX[1][j] == 1 && arrayX[countSegment-1][j] == 1 {
                        alertWin(player: "Player X")
                    }
                    if arrayX[i][0] == 1 && arrayX[i][1] == 1 && arrayX[i][countSegment-1] == 1 {
                        alertWin(player: "Player X")
                    }
                }
            }
        }
    }
    func checkWinO(x:Double,y:Double){
        let numX = Int((view.frame.size.width)/CGFloat(countSegment))
        for i in 0...countSegment-1 {
            for j in 0...countSegment-1{
                let numI = numX*i
                let numJ = numX*j
                if numI == Int(x) && numJ == Int(y){
                    arrayO[i][j] = 1

                    if arrayO[0][countSegment-1] == 1 && arrayO[i][j] == 1 && arrayO[countSegment-1][0] == 1 {
                        alertWin(player: "Player O")
                    }
                    if arrayO[0][0] == 1 && arrayO[i][j] == 1 && arrayO[countSegment-1][countSegment-1] == 1 {
                        alertWin(player: "Player o")
                    }
                    if arrayO[0][j] == 1 && arrayO[1][j] == 1 && arrayO[countSegment-1][j] == 1 {
                        alertWin(player: "Player o")
                    }
                    if arrayO[i][0] == 1 && arrayO[i][1] == 1 && arrayO[i][countSegment-1] == 1 {
                        alertWin(player: "Player o")
                    }
                }
            }
        }
    }
    func alertWin(player:String){
        arrayScroll.append(player)
        let alert = UIAlertController(title: "Alert", message: "WIN : \(player)", preferredStyle: UIAlertController.Style.alert)
        alert.addAction(UIAlertAction(title: "Click", style: UIAlertAction.Style.default, handler: nil))
        self.present(alert, animated: true, completion: nil)
        scrollLabel.text?.append("\(player)\n")
    }
    @objc func buttonAction(sender: UIButton!) {
    let btnsendtag: UIButton = sender
        counter += 1
    btnsendtag.backgroundColor = UIColor.init(cgColor: #colorLiteral(red: 0.8039215803, green: 0.8039215803, blue: 0.8039215803, alpha: 1))
        if (counter % 2)==0 {
            btnsendtag.setImage(UIImage(named: "nought"), for: .normal)
            checkWinO(x: Double(btnsendtag.frame.minX), y: Double(btnsendtag.frame.minY))
        }else{
            btnsendtag.setImage(UIImage(named: "cross"), for: .normal)
            checkWinX(x: Double(btnsendtag.frame.minX), y: Double(btnsendtag.frame.minY))
        }
    }
     override func viewDidLoad() {
        super.viewDidLoad()
        drawMap()
        self.scrollLabel.text = ""
        
    }
    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
        // Dispose of any resources that can be recreated.
    }
}
